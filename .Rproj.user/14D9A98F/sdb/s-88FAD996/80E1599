{
    "collab_server" : "",
    "contents" : "\n\n#' Pull information from TMDB API\n#' @description Send an API request to tmdb based on movie genre and min and max release dates\n#' @param api_key Api key requested from the website\n#' @param genres genres of interest can include: 'Action', 'Adventure', 'Animation',\n#'  'Comedy', 'Crime','Documentary', 'Drama', 'Family', 'Fantasy', 'History',\n#'  'Horror', 'Music', 'Mystery', 'Romance', 'Science Fiction', 'TV Movie', 'Thriller',\n#'   'War', 'Western'\n#' @param min_date Min release date in the format 'yyyy-mm-dd'\n#' @param max_date Max release date in the format 'yyyy-mm-dd'\n#' @param movie_request_lim Limit on the number of movies to pull\n#' @return A data frame containing movie titles along with movie attributes\n#' @export\n#'\nlibrary(tidyverse)\npull_movie_titles <- function(api_key, genres, min_date, max_date, movie_request_lim = 100){\n\n  #Set the page limit (one page returns 20 movies)\n  page_limit <- movie_request_lim / 20\n\n  #match the genre requested with the genre id\n  genre_ids <- match_genre_id(genres)\n\n  #create the url needed for the api request\n  url <- create_movie_url(api_key, genre_ids, min_date, max_date, page_num = 1)\n\n  #submit api request and return movie data in the form of a dataframe\n  tmdb_pull <- jsonlite::fromJSON(url, simplifyDataFrame = T)\n  tmdb_data <- tmdb_pull$request\n\n  #determine how many pages we need to loop through\n  total_pages <- tmdb_pull$total_pages\n  total_pages <- ifelse(total_pages > page_limit, page_limit, total_pages)\n\n  #loop through remaining pages and form one movie data frame\n  for(page in 1:total_pages){\n   url <- create_movie_url(api_key, genre_ids, min_date, max_date, page_num = page)\n   tmdb_add <- jsonlite::fromJSON(url, simplifyDataFrame = T)$results\n   tmdb_data <- rbind(tmdb_data, tmdb_add)\n  }\n\n  #The genres were a list withim a dataframe. This converts the list into a vector\n  tmdb_data %>%\n    mutate(genre_ids = sapply(df$genre_ids, function(x) paste0(x, collapse = ',')) %>%\n             unlist) %>%\n    rename(movie_id = id) %>%\n    select(-poster_path, -adult, -backdrop_path, -video)-> tmdb_data\n\n  return(tmdb_data)\n}\n\n\n\n\n#' Create movie genres data frame\n#' @description Create dataframe of the genres available on tmdb\n#' @return data frame of genres and respective genre id\n#' @export\n\nload_genres <- function(){\n  id <- c(28, 12, 16, 35, 80, 99, 18, 10751, 14, 36, 27,\n          10402, 9648, 10749, 878, 10770, 53, 10752, 37)\n\n  name <- c(\"Action\", \"Adventure\", \"Animation\", \"Comedy\", \"Crime\",\n            \"Documentary\", \"Drama\", \"Family\", \"Fantasy\", \"History\",\n            \"Horror\", \"Music\", \"Mystery\", \"Romance\", \"Science Fiction\",\n            \"TV Movie\", \"Thriller\", \"War\", \"Western\")\n\n  return(data.frame(id, name))\n}\n\n\n\n\n\n\n#' Create url for api request\n#' @description Form the url needed for the api request\n#' @param api_key Api key requested from the website\n#' @param genres genres of interest can include: 'Action', 'Adventure', 'Animation',\n#'  'Comedy', 'Crime','Documentary', 'Drama', 'Family', 'Fantasy', 'History',\n#'  'Horror', 'Music', 'Mystery', 'Romance', 'Science Fiction', 'TV Movie', 'Thriller',\n#'   'War', 'Western'\n#' @param min_date Min release date in the format 'yyyy-mm-dd'\n#' @param max_date Max release date in the format 'yyyy-mm-dd'\n#' @return url needed for api request as a single string\ncreate_movie_url <- function(api_key, genre_ids, min_date, max_date, page_num){\n      return(  paste0('https://api.themoviedb.org/3/discover/movie?api_key=',\n                 api_key,\n                '&language=en-US',\n                '&sort_by=popularity.desc',\n                '&include_adult=false',\n                '&include_video=false',\n                '&page=',page_num,\n                '&primary_release_date.gte=',min_date,\n                '&primary_release_date.lte=',max_date,\n                '&with_genres=',genre_ids) )\n\n}\n\n\n\n\n\n\n#' Match genre name to id needed for tmdb api\n#' @description Match the genre string to the genre id needed for the api request\n#' @param genres genres of interest can include: 'Action', 'Adventure', 'Animation',\n#'  'Comedy', 'Crime','Documentary', 'Drama', 'Family', 'Fantasy', 'History',\n#'  'Horror', 'Music', 'Mystery', 'Romance', 'Science Fiction', 'TV Movie', 'Thriller',\n#'   'War', 'Western'\n#' @return A string containing a comma separated string of genre ids; passable to the api\nmatch_genre_id <- function(genres){\n  genre_df <- load_genres()\n\n  genre_df %>%\n    filter(name %in% genres) %>%\n    .$id %>%\n    paste0(collapse = ',') -> genre_ids\n\n  return(genre_ids)\n}\n\n\n\n\n\n",
    "created" : 1490366431109.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1200638168",
    "id" : "80E1599",
    "lastKnownWriteTime" : 1490370772,
    "last_content_update" : 1490370772536,
    "path" : "~/Network Analysis/movieNetwork/R/tmdb_api_movies.R",
    "project_path" : "R/tmdb_api_movies.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}